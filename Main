#include "BluetoothSerial.h"
#include <ESP32Servo.h>
#include <NewPing.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

#if !defined(CONFIG_BT_SPP_ENABLED)
#error Serial Bluetooth not available or not enabled. It is only available for the ESP32 chip.
#endif


int dist;
int flag;
int Aflag;
// Motor A
int enable1Pin = 13; 
int motor1Pin1 = 12; 
int motor1Pin2 = 14; 

// Motor B
int enable2Pin = 27; 
int motor2Pin1 = 26; 
int motor2Pin2 = 25; 

int servoPin = 5;

// Setting PWM properties
const int freq = 30000;
const int pwmChannel = 0;
const int pwmChanne2 = 0;
const int resolution = 8;

const int trigger = 18;
const int echo = 19;
NewPing sonar(trigger, echo, 200);
Servo myservo;


BluetoothSerial SerialBT;

void robot_stop(){
  Serial.println("Motor stopped");
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);  
}
void robot_forward(){
  Serial.println("Moving Forward");
  ledcWrite(pwmChannel, 180);
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH); 
  ledcWrite(pwmChannel, 220);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}
void robot_back(){
  Serial.println("Moving Back");
  ledcWrite(pwmChannel, 180);
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW); 
  ledcWrite(pwmChannel, 220);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void robot_left(){
  Serial.println("Moving Left");
  ledcWrite(pwmChannel, 200);
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW); 
  ledcWrite(pwmChannel, 200);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void robot_right(){
  Serial.println("Moving Right");
  ledcWrite(pwmChannel, 200);
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH); 
  ledcWrite(pwmChannel, 200);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

void turnRight(){
  robot_stop();
  delay(1000);
  robot_right();
  delay(1250);
  robot_stop();
  delay(1000);  
  robot_forward();
  delay(2000);
  robot_stop();
  delay(1000);
  robot_left();
  delay(800);
  robot_stop();
  delay(1000);
}
void turnLeft(){
  robot_stop();
  delay(1000);
  robot_left();
  delay(800);
  robot_stop();
  delay(1000);  
  robot_forward();
  delay(2000);
  robot_stop();
  delay(1000);
  robot_right();
  delay(1250);
  robot_stop();
  delay(1000);
}
void turnBack(){
  robot_stop();
  delay(1000);
  robot_back();
  delay(2000); 
  robot_stop();
  delay(1000);     
}

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32test"); //Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!");
  
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enable2Pin, OUTPUT);
  pinMode(servoPin, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);  
  
  // configure LED PWM functionalitites
  ledcSetup(pwmChannel, freq, resolution);
  ledcSetup(pwmChanne2, freq, resolution);
  
  // attach the channel to the GPIO to be controlled
  ledcAttachPin(enable1Pin, pwmChannel);
  ledcAttachPin(enable2Pin, pwmChanne2);
  
  myservo.setPeriodHertz(50);
  myservo.attach(servoPin, 500, 2400);

   myservo.write(90);

  flag = 1;
  Aflag = 0;

}

void loop() {
  if (Serial.available()) {
    SerialBT.write(Serial.read());
  }
  if (SerialBT.available()) {
    char a = SerialBT.read();
    Serial.write(a);
    if(a=='F'){
      Serial.println("Forward");
      robot_forward();
    }else if(a=='B'){
      Serial.println("Backward");
      robot_back();
    }else if(a=='L'){
      Serial.println("Turn Left");
      robot_left();
    }else if(a=='R'){
      Serial.println("Turn Right");
      robot_right();    
    }else if(a=='S'){
      Serial.println("Stop");
      robot_stop();
    }else if(a=='A'){
      Serial.println("Auto");
      Aflag = 1;
    }else if(a=='a'){
      Serial.println("Stop-Auto");
      robot_stop();
      Aflag = 0;
    }
  }
  delay(20);{
  if(Aflag == 1){
    dist = sonar.ping_cm();
    Serial.print("Distance: ");
    Serial.println(dist);
    delay(50);
    dist = sonar.ping_cm();
    Serial.print("Distance: ");
    Serial.println(dist);
    delay(50);
    dist = sonar.ping_cm();
    Serial.print("Distance: ");
    Serial.println(dist);
    delay(50);
    dist = sonar.ping_cm();
    Serial.print("Distance: ");
    Serial.println(dist);
    delay(50);
    dist = sonar.ping_cm();
    Serial.print("Distance: ");
    Serial.println(dist);
    delay(50);
  
    if(dist<=20){ 
          digitalWrite(LED_BUILTIN, LOW);
          robot_stop();

          myservo.write(45);
          delay(1000);
          dist = sonar.ping_cm();
          delay(500);
          myservo.write(90);
          if(dist>20){
            turnRight();
          }
          else{
            myservo.write(135);
            delay(1000);
            dist = sonar.ping_cm();
            delay(500);
            myservo.write(90);
            turnLeft();
                }                  
          }
    else{
            digitalWrite(LED_BUILTIN, HIGH); 
            robot_forward();
    } 
        }
   }  
}

